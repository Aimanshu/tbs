<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Item;
use App\Payments;

/** All Paypal Details class **/
use PayPal\Api\ItemList;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\PaymentExecution;
use PayPal\Api\RedirectUrls;
use PayPal\Api\Transaction;
use PayPal\Auth\OAuthTokenCredential;
use PayPal\Rest\ApiContext;
use Redirect;
use Session;
use URL;



class PaymentController extends Controller
{
    private $_api_context;
    /**
     * Create a new controller instance.
     *
     * @return void
     */

    public function __construct()
    {
        /** PayPal api context **/
        $paypal_conf = \Config::get('paypal');
        $this->_api_context = new ApiContext(new OAuthTokenCredential($paypal_conf['client_id'],$paypal_conf['secret']));
        $this->_api_context->setConfig($paypal_conf['settings']);
    }

    public function index()
    {
        return view('paywithpaypal');
    }

    public function payWithpaypal(Request $request)
    {
        $payer = new Payer();
        $payer->setPaymentMethod('paypal');

        $item_1 = new Item();

        $item_1->setName('Traders Registration') /** item name **/
            ->setCurrency('USD')
            ->setQuantity(1)
            // ->setPrice($request->get('amount')); /** unit price **/
            ->setPrice(0.1); /** unit price **/

        $item_list = new ItemList();
        $item_list->setItems(array($item_1));

        $amount = new Amount();
        $amount->setCurrency('USD')
            // ->setTotal($request->get('amount'));
            ->setTotal(0.1);

        $transaction = new Transaction();
        $transaction->setAmount($amount)
            ->setItemList($item_list)
            ->setDescription('Your transaction description');

        $redirect_urls = new RedirectUrls();
        // $redirect_urls->setReturnUrl(URL::to('status')) /** Specify return URL **/
        $redirect_urls->setReturnUrl(route('payment_status', 'success'))
            ->setCancelUrl(route('payment_status', 'fail'));

        $payment = new Payment();
        $payment->setIntent('Sale')
            ->setPayer($payer)
            ->setRedirectUrls($redirect_urls)
            ->setTransactions(array($transaction));
        /** dd($payment->create($this->_api_context));exit; **/
        try {

            $payment->create($this->_api_context);
            
            // $traders_id = Session::get('Traders_id');
            $traders_id = 10;
            //For Store into dateBase
             $data = [
                'payment_id'   =>$payment->id,
                'traders_id'   => $traders_id,
                'price'        => 0.1,
                'status'       => 0,
            ];
            Payments::create($data);


        } catch (\PayPal\Exception\PPConnectionException $ex) {
            if (\Config::get('app.debug')) {
                \Session::put('error', 'Connection timeout');
                return Redirect::to('/');

            } else {
                \Session::put('error', 'Some error occur, sorry for inconvenient');
                return Redirect::to('/');
            }
        }

        foreach ($payment->getLinks() as $link) {
            if ($link->getRel() == 'approval_url') {
                $redirect_url = $link->getHref();
                break;
            }
        }

        /** add payment ID to session **/
        Session::put('paypal_payment_id', $payment->getId());
        if (isset($redirect_url)) {
            /** redirect to paypal **/
            return Redirect::away($redirect_url);
        }
        \Session::put('error', 'Unknown error occurred');
        return Redirect::to('/');
    }

    public function getPaymentStatus($status)
    {
        /** Get the payment ID before session clear **/
        $payment_id = Session::get('paypal_payment_id');
        /** clear the session payment ID **/
        Session::forget('paypal_payment_id');
        if (empty(Input::get('PayerID')) || empty(Input::get('token'))) {
            \Session::put('error', 'Payment failed');
            return Redirect::to('/');
        }
        $a=$_GET['paymentId'];

        // return $a;
        $payment = Payment::get($payment_id, $this->_api_context);
        $execution = new PaymentExecution();

        $b=$_GET['PayerID'];
        $execution->setPayerId($b);

        $c=$execution;
        /**Execute the payment **/

        $result = $payment->execute($c, $this->_api_context);
        if ($result->getState() == 'approved') {
            // return $result;
            //For Store into dateBase

            $payments = Payments::where('payment_id',$result->id)->first();

            $data = [
                'status'  => 1,
            ];
            $payments->update($data);

            return "Payment is Done Please Check Mail!!";
            \Session::put('success', 'Payment success');
            return Redirect::to('/success');
        }
        return "Payment Is Fail Plase Try Again!!";
        \Session::put('error', 'Payment failed');
        return Redirect::to('/Payment_failed');

    }

}